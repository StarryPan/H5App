{"ast":null,"code":"/* eslint-disable no-throw-literal */\nimport \"whatwg-fetch\";\nimport Util from '../common/util';\nimport Cookies from 'js-cookie';\nimport Prefix from './prefix';\nimport { getAccountInfo } from '../common/bridge';\nconst postRequest = async function (url) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var token = await getAccountInfo();\n  if (isEmptyObject(token)) {\n    token = Util.getToken();\n  }\n  let options = {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": 'application/json'\n    },\n    body: JSON.stringify({\n      ...params,\n      ...token\n    })\n  };\n  const fetchUrl = url.indexOf('http') === 0 ? url : Prefix.domain + Prefix.path + url;\n  return await fetch(fetchUrl, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      const error = new Error(response.statusText);\n      throw {\n        err: error,\n        message: '网络异常,请稍后重试! 错误代码：' + error.desc\n      };\n    }\n  }).then(res => {\n    console.log(\"response.success\", res);\n    if (res.code === 403) {\n      goLogin();\n      throw {};\n    } else if (res.access_token && res.token_type && res.expires_at) {\n      Util.setLoginCookie(res);\n      return {\n        message: '登录成功'\n      };\n    } else if (res.code === 0) {\n      return res.data;\n    } else {\n      throw res;\n    }\n  }).catch(err => {\n    console.log(\"err\", err);\n    throw {\n      message: err ? err.desc : '',\n      code: err ? err.code : ''\n    };\n  });\n};\nfunction obj2params(obj) {\n  var result = '';\n  var item;\n  for (item in obj) {\n    result += '&' + item + '=' + encodeURIComponent(obj[item]);\n  }\n  if (result) {\n    result = result.slice(1);\n  }\n  return result;\n}\nconst getRequest = async function (url) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var token = await getAccountInfo();\n  if (isEmptyObject(token)) {\n    token = Util.getToken();\n  }\n  let options = {\n    headers: {\n      \"Content-Type\": 'application/json'\n    }\n  };\n  const search = obj2params({\n    ...params,\n    ...token\n  });\n  const fetchUrl = Prefix.domain + Prefix.path + url + \"?\" + search;\n  return await fetch(fetchUrl, options).then(response => {\n    console.log(\"response\", response);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const error = new Error(response.statusText);\n      throw {\n        err: error,\n        message: '网络异常,请稍后重试! 错误代码：' + error.desc,\n        code: response.status\n      };\n    }\n  }).then(res => {\n    if (res.code === 0) {\n      return res.data;\n    } else {\n      throw res;\n    }\n  }).catch(err => {\n    throw {\n      message: err.desc || '网络不给力，请稍后再试',\n      code: err.code\n    };\n  });\n};\nfunction goLogin() {\n  Cookies.remove(\"Authorization\");\n  window.location.replace('/#/login?formUrl=' + encodeURIComponent(window.location.href));\n}\nfunction isEmptyObject(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n}\nconst putRequest = async (url, data) => {\n  console.log(\"putRequest\", data);\n  let options = {\n    method: 'POST',\n    body: data\n  };\n  return await fetch(url, options).then(response => {\n    if (response.ok) {\n      return {};\n    } else {\n      throw {};\n    }\n  }).catch(err => {\n    throw {\n      message: '网络不给力'\n    };\n  });\n};\nexport const postFetch = postRequest;\nexport const getFetch = getRequest;\nexport const putFetch = putRequest;","map":{"version":3,"names":["Util","Cookies","Prefix","getAccountInfo","postRequest","url","params","token","isEmptyObject","getToken","options","method","headers","body","JSON","stringify","fetchUrl","indexOf","domain","path","fetch","then","response","ok","json","error","Error","statusText","err","message","desc","res","console","log","code","goLogin","access_token","token_type","expires_at","setLoginCookie","data","catch","obj2params","obj","result","item","encodeURIComponent","slice","getRequest","search","status","remove","window","location","replace","href","key","putRequest","postFetch","getFetch","putFetch"],"sources":["/usr/local/var/www/orangeweb/src/service/request.js"],"sourcesContent":["/* eslint-disable no-throw-literal */\nimport \"whatwg-fetch\";\nimport Util from '../common/util';\nimport Cookies from 'js-cookie';\nimport Prefix from './prefix';\nimport { getAccountInfo } from '../common/bridge'\nconst postRequest = async (url, params = {})=>{\n    var token = await getAccountInfo()\n    if (isEmptyObject(token)) {\n        token = Util.getToken()\n    }\n    let options = {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": 'application/json',\n        },\n        body: JSON.stringify({\n            ...params,\n            ...token,\n        }),\n    }\n    const fetchUrl = url.indexOf('http') === 0 ? url : ( Prefix.domain + Prefix.path + url);\n    return await fetch(fetchUrl, options).then((response)=>{\n        if (response.ok) {\n            return response.json();\n        } else {\n            const error = new Error(response.statusText);\n            throw {\n                err: error,\n                message: '网络异常,请稍后重试! 错误代码：' + error.desc\n            }\n        }\n    }).then((res)=>{\n        console.log(\"response.success\", res);\n        if(res.code === 403){\n            goLogin();\n            throw {}\n        }else if(res.access_token && res.token_type && res.expires_at){\n            Util.setLoginCookie(res);\n            return {\n                message: '登录成功'\n            }\n        }else if(res.code === 0){\n            return res.data;\n        }else{\n            throw res;\n        }\n    }).catch((err)=>{\n        console.log(\"err\", err);\n        throw {\n            message: err ? err.desc : '',\n            code: err ? err.code : '',\n        }\n    })\n}\nfunction obj2params(obj) {\n    var result = '';\n    var item;\n    for (item in obj) {\n        result += '&' + item + '=' + encodeURIComponent(obj[item]);\n    }\n\n    if (result) {\n        result = result.slice(1);\n    }\n\n    return result;\n}\nconst getRequest = async (url, params = {})=>{\n    var token = await getAccountInfo()\n    if (isEmptyObject(token)) {\n        token = Util.getToken()\n    }\n\n    let options = {\n        headers: {\n            \"Content-Type\": 'application/json',\n        },\n    }\n    const search  =obj2params({\n        ...params,\n        ...token\n    });\n    const fetchUrl = Prefix.domain + Prefix.path + url + \"?\" + search;\n    return await fetch(fetchUrl, options).then((response)=>{\n        console.log(\"response\", response);\n        if (response.ok) {\n            return response.json();\n        } else {\n            const error = new Error(response.statusText);\n            throw {\n                err: error,\n                message: '网络异常,请稍后重试! 错误代码：' + error.desc,\n                code:response.status\n            }\n        }\n    }).then((res)=>{\n        if(res.code === 0){\n            return res.data;\n        }else{\n            throw res;\n        }\n    }).catch((err)=>{\n        throw {\n            message: err.desc || '网络不给力，请稍后再试',\n            code: err.code\n        }\n    })\n}\n\nfunction goLogin(){\n    Cookies.remove(\"Authorization\");\n    window.location.replace('/#/login?formUrl=' + encodeURIComponent(window.location.href));\n}\n\nfunction isEmptyObject(obj) {\n    for (var key in obj) {\n        return false;\n    }\n    return true;\n}\n\nconst putRequest = async (url, data)=>{\n    console.log(\"putRequest\", data);\n    let options = {\n        method: 'POST',\n        body: data\n    }\n    return await fetch(url, options).then((response)=>{\n        if (response.ok) {\n            return {};\n        }else{\n            throw {}\n        }\n    }).catch((err)=>{\n        throw {\n            message: '网络不给力'\n        }\n    })\n}\n\nexport const postFetch = postRequest;\nexport const getFetch = getRequest;\nexport const putFetch = putRequest;\n"],"mappings":"AAAA;AACA,OAAO,cAAc;AACrB,OAAOA,IAAI,MAAM,gBAAgB;AACjC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,cAAc,QAAQ,kBAAkB;AACjD,MAAMC,WAAW,GAAG,gBAAOC,GAAG,EAAgB;EAAA,IAAdC,MAAM,uEAAG,CAAC,CAAC;EACvC,IAAIC,KAAK,GAAG,MAAMJ,cAAc,EAAE;EAClC,IAAIK,aAAa,CAACD,KAAK,CAAC,EAAE;IACtBA,KAAK,GAAGP,IAAI,CAACS,QAAQ,EAAE;EAC3B;EACA,IAAIC,OAAO,GAAG;IACVC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjB,GAAGT,MAAM;MACT,GAAGC;IACP,CAAC;EACL,CAAC;EACD,MAAMS,QAAQ,GAAGX,GAAG,CAACY,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAGZ,GAAG,GAAKH,MAAM,CAACgB,MAAM,GAAGhB,MAAM,CAACiB,IAAI,GAAGd,GAAI;EACvF,OAAO,MAAMe,KAAK,CAACJ,QAAQ,EAAEN,OAAO,CAAC,CAACW,IAAI,CAAEC,QAAQ,IAAG;IACnD,IAAIA,QAAQ,CAACC,EAAE,EAAE;MACb,OAAOD,QAAQ,CAACE,IAAI,EAAE;IAC1B,CAAC,MAAM;MACH,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAACK,UAAU,CAAC;MAC5C,MAAM;QACFC,GAAG,EAAEH,KAAK;QACVI,OAAO,EAAE,mBAAmB,GAAGJ,KAAK,CAACK;MACzC,CAAC;IACL;EACJ,CAAC,CAAC,CAACT,IAAI,CAAEU,GAAG,IAAG;IACXC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACpC,IAAGA,GAAG,CAACG,IAAI,KAAK,GAAG,EAAC;MAChBC,OAAO,EAAE;MACT,MAAM,CAAC,CAAC;IACZ,CAAC,MAAK,IAAGJ,GAAG,CAACK,YAAY,IAAIL,GAAG,CAACM,UAAU,IAAIN,GAAG,CAACO,UAAU,EAAC;MAC1DtC,IAAI,CAACuC,cAAc,CAACR,GAAG,CAAC;MACxB,OAAO;QACHF,OAAO,EAAE;MACb,CAAC;IACL,CAAC,MAAK,IAAGE,GAAG,CAACG,IAAI,KAAK,CAAC,EAAC;MACpB,OAAOH,GAAG,CAACS,IAAI;IACnB,CAAC,MAAI;MACD,MAAMT,GAAG;IACb;EACJ,CAAC,CAAC,CAACU,KAAK,CAAEb,GAAG,IAAG;IACZI,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEL,GAAG,CAAC;IACvB,MAAM;MACFC,OAAO,EAAED,GAAG,GAAGA,GAAG,CAACE,IAAI,GAAG,EAAE;MAC5BI,IAAI,EAAEN,GAAG,GAAGA,GAAG,CAACM,IAAI,GAAG;IAC3B,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AACD,SAASQ,UAAU,CAACC,GAAG,EAAE;EACrB,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,IAAI;EACR,KAAKA,IAAI,IAAIF,GAAG,EAAE;IACdC,MAAM,IAAI,GAAG,GAAGC,IAAI,GAAG,GAAG,GAAGC,kBAAkB,CAACH,GAAG,CAACE,IAAI,CAAC,CAAC;EAC9D;EAEA,IAAID,MAAM,EAAE;IACRA,MAAM,GAAGA,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;EAC5B;EAEA,OAAOH,MAAM;AACjB;AACA,MAAMI,UAAU,GAAG,gBAAO3C,GAAG,EAAgB;EAAA,IAAdC,MAAM,uEAAG,CAAC,CAAC;EACtC,IAAIC,KAAK,GAAG,MAAMJ,cAAc,EAAE;EAClC,IAAIK,aAAa,CAACD,KAAK,CAAC,EAAE;IACtBA,KAAK,GAAGP,IAAI,CAACS,QAAQ,EAAE;EAC3B;EAEA,IAAIC,OAAO,GAAG;IACVE,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EACD,MAAMqC,MAAM,GAAGP,UAAU,CAAC;IACtB,GAAGpC,MAAM;IACT,GAAGC;EACP,CAAC,CAAC;EACF,MAAMS,QAAQ,GAAGd,MAAM,CAACgB,MAAM,GAAGhB,MAAM,CAACiB,IAAI,GAAGd,GAAG,GAAG,GAAG,GAAG4C,MAAM;EACjE,OAAO,MAAM7B,KAAK,CAACJ,QAAQ,EAAEN,OAAO,CAAC,CAACW,IAAI,CAAEC,QAAQ,IAAG;IACnDU,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEX,QAAQ,CAAC;IACjC,IAAIA,QAAQ,CAACC,EAAE,EAAE;MACb,OAAOD,QAAQ,CAACE,IAAI,EAAE;IAC1B,CAAC,MAAM;MACH,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAACK,UAAU,CAAC;MAC5C,MAAM;QACFC,GAAG,EAAEH,KAAK;QACVI,OAAO,EAAE,mBAAmB,GAAGJ,KAAK,CAACK,IAAI;QACzCI,IAAI,EAACZ,QAAQ,CAAC4B;MAClB,CAAC;IACL;EACJ,CAAC,CAAC,CAAC7B,IAAI,CAAEU,GAAG,IAAG;IACX,IAAGA,GAAG,CAACG,IAAI,KAAK,CAAC,EAAC;MACd,OAAOH,GAAG,CAACS,IAAI;IACnB,CAAC,MAAI;MACD,MAAMT,GAAG;IACb;EACJ,CAAC,CAAC,CAACU,KAAK,CAAEb,GAAG,IAAG;IACZ,MAAM;MACFC,OAAO,EAAED,GAAG,CAACE,IAAI,IAAI,aAAa;MAClCI,IAAI,EAAEN,GAAG,CAACM;IACd,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,SAASC,OAAO,GAAE;EACdlC,OAAO,CAACkD,MAAM,CAAC,eAAe,CAAC;EAC/BC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC,mBAAmB,GAAGR,kBAAkB,CAACM,MAAM,CAACC,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC3F;AAEA,SAAS/C,aAAa,CAACmC,GAAG,EAAE;EACxB,KAAK,IAAIa,GAAG,IAAIb,GAAG,EAAE;IACjB,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;AAEA,MAAMc,UAAU,GAAG,OAAOpD,GAAG,EAAEmC,IAAI,KAAG;EAClCR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,IAAI,CAAC;EAC/B,IAAI9B,OAAO,GAAG;IACVC,MAAM,EAAE,MAAM;IACdE,IAAI,EAAE2B;EACV,CAAC;EACD,OAAO,MAAMpB,KAAK,CAACf,GAAG,EAAEK,OAAO,CAAC,CAACW,IAAI,CAAEC,QAAQ,IAAG;IAC9C,IAAIA,QAAQ,CAACC,EAAE,EAAE;MACb,OAAO,CAAC,CAAC;IACb,CAAC,MAAI;MACD,MAAM,CAAC,CAAC;IACZ;EACJ,CAAC,CAAC,CAACkB,KAAK,CAAEb,GAAG,IAAG;IACZ,MAAM;MACFC,OAAO,EAAE;IACb,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAM6B,SAAS,GAAGtD,WAAW;AACpC,OAAO,MAAMuD,QAAQ,GAAGX,UAAU;AAClC,OAAO,MAAMY,QAAQ,GAAGH,UAAU"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from 'fbjs/lib/isEmpty';\nimport warning from 'warning';\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n// type differType = (data1, data2) => bool;\n//\n// type ParamType = {\n//   rowHasChanged: differType;\n//   getRowData: ?typeof defaultGetRowData;\n//   sectionHeaderHasChanged: ?differType;\n//   getSectionHeaderData: ?typeof defaultGetSectionHeaderData;\n// }\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListViewDataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nvar ListViewDataSource = function () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n  _createClass(ListViewDataSource, [{\n    key: 'cloneWithRows',\n    value: function cloneWithRows(dataBlob, rowIdentities) {\n      var rowIds = rowIdentities ? [rowIdentities] : null;\n      if (!this._sectionHeaderHasChanged) {\n        this._sectionHeaderHasChanged = function () {\n          return false;\n        };\n      }\n      return this.cloneWithRowsAndSections({\n        s1: dataBlob\n      }, ['s1'], rowIds);\n    }\n\n    /**\n     * This performs the same function as the `cloneWithRows` function but here\n     * you also specify what your `sectionIdentities` are. If you don't care\n     * about sections you should safely be able to use `cloneWithRows`.\n     *\n     * `sectionIdentities` is an array of identifiers for  sections.\n     * ie. ['s1', 's2', ...].  If not provided, it's assumed that the\n     * keys of dataBlob are the section identities.\n     *\n     * Note: this returns a new object!\n     */\n  }, {\n    key: 'cloneWithRowsAndSections',\n    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n      var newSource = new ListViewDataSource({\n        getRowData: this._getRowData,\n        getSectionHeaderData: this._getSectionHeaderData,\n        rowHasChanged: this._rowHasChanged,\n        sectionHeaderHasChanged: this._sectionHeaderHasChanged\n      });\n      newSource._dataBlob = dataBlob;\n      if (sectionIdentities) {\n        newSource.sectionIdentities = sectionIdentities;\n      } else {\n        newSource.sectionIdentities = Object.keys(dataBlob);\n      }\n      if (rowIdentities) {\n        newSource.rowIdentities = rowIdentities;\n      } else {\n        newSource.rowIdentities = [];\n        newSource.sectionIdentities.forEach(function (sectionID) {\n          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n        });\n      }\n      newSource._cachedRowCount = countRows(newSource.rowIdentities);\n      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n      return newSource;\n    }\n  }, {\n    key: 'getRowCount',\n    value: function getRowCount() {\n      return this._cachedRowCount;\n    }\n  }, {\n    key: 'getRowAndSectionCount',\n    value: function getRowAndSectionCount() {\n      return this._cachedRowCount + this.sectionIdentities.length;\n    }\n\n    /**\n     * Returns if the row is dirtied and needs to be rerendered\n     */\n  }, {\n    key: 'rowShouldUpdate',\n    value: function rowShouldUpdate(sectionIndex, rowIndex) {\n      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n      return needsUpdate;\n    }\n\n    /**\n     * Gets the data required to render the row.\n     */\n  }, {\n    key: 'getRowData',\n    value: function getRowData(sectionIndex, rowIndex) {\n      var sectionID = this.sectionIdentities[sectionIndex];\n      var rowID = this.rowIdentities[sectionIndex][rowIndex];\n      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n      return this._getRowData(this._dataBlob, sectionID, rowID);\n    }\n\n    /**\n     * Gets the rowID at index provided if the dataSource arrays were flattened,\n     * or null of out of range indexes.\n     */\n  }, {\n    key: 'getRowIDForFlatIndex',\n    value: function getRowIDForFlatIndex(index) {\n      var accessIndex = index;\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.rowIdentities[ii][accessIndex];\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Gets the sectionID at index provided if the dataSource arrays were flattened,\n     * or null for out of range indexes.\n     */\n  }, {\n    key: 'getSectionIDForFlatIndex',\n    value: function getSectionIDForFlatIndex(index) {\n      var accessIndex = index;\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.sectionIdentities[ii];\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Returns an array containing the number of rows in each section\n     */\n  }, {\n    key: 'getSectionLengths',\n    value: function getSectionLengths() {\n      var results = [];\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        results.push(this.rowIdentities[ii].length);\n      }\n      return results;\n    }\n\n    /**\n     * Returns if the section header is dirtied and needs to be rerendered\n     */\n  }, {\n    key: 'sectionHeaderShouldUpdate',\n    value: function sectionHeaderShouldUpdate(sectionIndex) {\n      var needsUpdate = this._dirtySections[sectionIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n      return needsUpdate;\n    }\n\n    /**\n     * Gets the data required to render the section header\n     */\n  }, {\n    key: 'getSectionHeaderData',\n    value: function getSectionHeaderData(sectionIndex) {\n      if (!this._getSectionHeaderData) {\n        return null;\n      }\n      var sectionID = this.sectionIdentities[sectionIndex];\n      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n      return this._getSectionHeaderData(this._dataBlob, sectionID);\n    }\n\n    /**\n     * Private members and methods.\n     */\n\n    // These two 'protected' variables are accessed by ListView to iterate over\n    // the data in this class.\n  }, {\n    key: '_calculateDirtyArrays',\n    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n      // construct a hashmap of the existing (old) id arrays\n      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n      var prevRowsHash = {};\n      for (var ii = 0; ii < prevRowIDs.length; ii++) {\n        var sectionID = prevSectionIDs[ii];\n        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n      }\n\n      // compare the 2 identity array and get the dirtied rows\n      this._dirtySections = [];\n      this._dirtyRows = [];\n      var dirty;\n      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n        var sectionID = this.sectionIdentities[sIndex];\n        // dirty if the sectionHeader is new or _sectionHasChanged is true\n        dirty = !prevSectionsHash[sectionID];\n        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n        if (!dirty && sectionHeaderHasChanged) {\n          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n        }\n        this._dirtySections.push(!!dirty);\n        this._dirtyRows[sIndex] = [];\n        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n          var rowID = this.rowIdentities[sIndex][rIndex];\n          // dirty if the section is new, row is new or _rowHasChanged is true\n          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n          this._dirtyRows[sIndex].push(!!dirty);\n        }\n      }\n    }\n  }]);\n  return ListViewDataSource;\n}();\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\n// module.exports = ListViewDataSource;\nexport default ListViewDataSource;","map":{"version":3,"names":["_classCallCheck","_createClass","invariant","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","key","value","cloneWithRows","rowIds","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result"],"sources":["/usr/local/var/www/orangeweb/node_modules/rmc-list-view/es/ListViewDataSource.js"],"sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from 'fbjs/lib/isEmpty';\nimport warning from 'warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n// type differType = (data1, data2) => bool;\n//\n// type ParamType = {\n//   rowHasChanged: differType;\n//   getRowData: ?typeof defaultGetRowData;\n//   sectionHeaderHasChanged: ?differType;\n//   getSectionHeaderData: ?typeof defaultGetSectionHeaderData;\n// }\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListViewDataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nvar ListViewDataSource = function () {\n\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  _createClass(ListViewDataSource, [{\n    key: 'cloneWithRows',\n    value: function cloneWithRows(dataBlob, rowIdentities) {\n      var rowIds = rowIdentities ? [rowIdentities] : null;\n      if (!this._sectionHeaderHasChanged) {\n        this._sectionHeaderHasChanged = function () {\n          return false;\n        };\n      }\n      return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);\n    }\n\n    /**\n     * This performs the same function as the `cloneWithRows` function but here\n     * you also specify what your `sectionIdentities` are. If you don't care\n     * about sections you should safely be able to use `cloneWithRows`.\n     *\n     * `sectionIdentities` is an array of identifiers for  sections.\n     * ie. ['s1', 's2', ...].  If not provided, it's assumed that the\n     * keys of dataBlob are the section identities.\n     *\n     * Note: this returns a new object!\n     */\n\n  }, {\n    key: 'cloneWithRowsAndSections',\n    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n\n      var newSource = new ListViewDataSource({\n        getRowData: this._getRowData,\n        getSectionHeaderData: this._getSectionHeaderData,\n        rowHasChanged: this._rowHasChanged,\n        sectionHeaderHasChanged: this._sectionHeaderHasChanged\n      });\n      newSource._dataBlob = dataBlob;\n      if (sectionIdentities) {\n        newSource.sectionIdentities = sectionIdentities;\n      } else {\n        newSource.sectionIdentities = Object.keys(dataBlob);\n      }\n      if (rowIdentities) {\n        newSource.rowIdentities = rowIdentities;\n      } else {\n        newSource.rowIdentities = [];\n        newSource.sectionIdentities.forEach(function (sectionID) {\n          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n        });\n      }\n      newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n      return newSource;\n    }\n  }, {\n    key: 'getRowCount',\n    value: function getRowCount() {\n      return this._cachedRowCount;\n    }\n  }, {\n    key: 'getRowAndSectionCount',\n    value: function getRowAndSectionCount() {\n      return this._cachedRowCount + this.sectionIdentities.length;\n    }\n\n    /**\n     * Returns if the row is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'rowShouldUpdate',\n    value: function rowShouldUpdate(sectionIndex, rowIndex) {\n      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n      return needsUpdate;\n    }\n\n    /**\n     * Gets the data required to render the row.\n     */\n\n  }, {\n    key: 'getRowData',\n    value: function getRowData(sectionIndex, rowIndex) {\n      var sectionID = this.sectionIdentities[sectionIndex];\n      var rowID = this.rowIdentities[sectionIndex][rowIndex];\n      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n      return this._getRowData(this._dataBlob, sectionID, rowID);\n    }\n\n    /**\n     * Gets the rowID at index provided if the dataSource arrays were flattened,\n     * or null of out of range indexes.\n     */\n\n  }, {\n    key: 'getRowIDForFlatIndex',\n    value: function getRowIDForFlatIndex(index) {\n      var accessIndex = index;\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.rowIdentities[ii][accessIndex];\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Gets the sectionID at index provided if the dataSource arrays were flattened,\n     * or null for out of range indexes.\n     */\n\n  }, {\n    key: 'getSectionIDForFlatIndex',\n    value: function getSectionIDForFlatIndex(index) {\n      var accessIndex = index;\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        if (accessIndex >= this.rowIdentities[ii].length) {\n          accessIndex -= this.rowIdentities[ii].length;\n        } else {\n          return this.sectionIdentities[ii];\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Returns an array containing the number of rows in each section\n     */\n\n  }, {\n    key: 'getSectionLengths',\n    value: function getSectionLengths() {\n      var results = [];\n      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n        results.push(this.rowIdentities[ii].length);\n      }\n      return results;\n    }\n\n    /**\n     * Returns if the section header is dirtied and needs to be rerendered\n     */\n\n  }, {\n    key: 'sectionHeaderShouldUpdate',\n    value: function sectionHeaderShouldUpdate(sectionIndex) {\n      var needsUpdate = this._dirtySections[sectionIndex];\n      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n      return needsUpdate;\n    }\n\n    /**\n     * Gets the data required to render the section header\n     */\n\n  }, {\n    key: 'getSectionHeaderData',\n    value: function getSectionHeaderData(sectionIndex) {\n      if (!this._getSectionHeaderData) {\n        return null;\n      }\n      var sectionID = this.sectionIdentities[sectionIndex];\n      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n      return this._getSectionHeaderData(this._dataBlob, sectionID);\n    }\n\n    /**\n     * Private members and methods.\n     */\n\n    // These two 'protected' variables are accessed by ListView to iterate over\n    // the data in this class.\n\n  }, {\n    key: '_calculateDirtyArrays',\n    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n      // construct a hashmap of the existing (old) id arrays\n      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n      var prevRowsHash = {};\n      for (var ii = 0; ii < prevRowIDs.length; ii++) {\n        var sectionID = prevSectionIDs[ii];\n        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n      }\n\n      // compare the 2 identity array and get the dirtied rows\n      this._dirtySections = [];\n      this._dirtyRows = [];\n\n      var dirty;\n      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n        var sectionID = this.sectionIdentities[sIndex];\n        // dirty if the sectionHeader is new or _sectionHasChanged is true\n        dirty = !prevSectionsHash[sectionID];\n        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n        if (!dirty && sectionHeaderHasChanged) {\n          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n        }\n        this._dirtySections.push(!!dirty);\n\n        this._dirtyRows[sIndex] = [];\n        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n          var rowID = this.rowIdentities[sIndex][rIndex];\n          // dirty if the section is new, row is new or _rowHasChanged is true\n          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n          this._dirtyRows[sIndex].push(!!dirty);\n        }\n      }\n    }\n  }]);\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\n// module.exports = ListViewDataSource;\nexport default ListViewDataSource;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
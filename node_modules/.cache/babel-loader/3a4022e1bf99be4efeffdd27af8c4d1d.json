{"ast":null,"code":"var _jsxFileName = \"/usr/local/var/www/orangeweb/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * 使用 JSBridge 总结：\n *  1、跟 IOS 交互的时候，只需要且必须注册 iosFuntion 方法即可，\n *      不能在 setupWebViewJavascriptBridge 中执行 bridge.init 方法，否则 IOS 无法调用到 H5 的注册函数；\n *  2、与安卓进行交互的时候\n *      ①、使用 iosFuntion，就可以实现 H5 调用 安卓的注册函数，但是安卓无法调用 H5 的注册函数，\n *          并且 H5 调用安卓成功后的回调函数也无法执行\n *      ②、使用 andoirFunction 并且要在 setupWebViewJavascriptBridge 中执行 bridge.init 方法，\n *          安卓才可以正常调用 H5 的回调函数，并且 H5 调用安卓成功后的回调函数也可以正常执行了\n */\n\nconst u = navigator.userAgent;\n// Android终端\nconst isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1;\n// IOS 终端\nconst isIOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\nconst isInApp = u.indexOf('app') > -1;\n/**\n * Android  与安卓交互时：\n *      1、不调用这个函数安卓无法调用 H5 注册的事件函数；\n *      2、但是 H5 可以正常调用安卓注册的事件函数；\n *      3、还必须在 setupWebViewJavascriptBridge 中执行 bridge.init 方法，否则：\n *          ①、安卓依然无法调用 H5 注册的事件函数\n *          ①、H5 正常调用安卓事件函数后的回调函数无法正常执行\n *          \n * @param {*} callback \n */\nconst andoirFunction = callback => {\n  if (window.WebViewJavascriptBridge) {\n    callback(window.WebViewJavascriptBridge);\n  } else {\n    document.addEventListener('WebViewJavascriptBridgeReady', function () {\n      callback(window.WebViewJavascriptBridge);\n    }, false);\n  }\n};\n\n/**\n * IOS 与 IOS 交互时，使用这个函数即可，别的操作都不需要执行\n * @param {*} callback \n */\nconst iosFuntion = callback => {\n  if (window.WebViewJavascriptBridge) {\n    return callback(window.WebViewJavascriptBridge);\n  }\n  if (window.WVJBCallbacks) {\n    return window.WVJBCallbacks.push(callback);\n  }\n  window.WVJBCallbacks = [callback];\n  var WVJBIframe = document.createElement('iframe');\n  WVJBIframe.style.display = 'none';\n  WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';\n  document.documentElement.appendChild(WVJBIframe);\n  setTimeout(function () {\n    document.documentElement.removeChild(WVJBIframe);\n  }, 0);\n};\n\n/**\n * 注册 setupWebViewJavascriptBridge 方法\n *  之所以不将上面两个方法融合成一个方法，是因为放在一起，那么就只有 iosFuntion 中相关的方法体生效\n */\nwindow.setupWebViewJavascriptBridge = isInApp ? isAndroid ? andoirFunction : iosFuntion : null;\n\n/**\n * 这里如果不做判断是不是安卓，而是直接就执行下面的方法，就会导致 \n *      1、IOS 无法调用 H5 这边注册的事件函数\n *      2、H5 可以正常调用 IOS 这边的事件函数，并且 H5 的回调函数可以正常执行\n */\nif (isAndroid && isInApp) {\n  /**\n   * 与安卓交互时，不调用这个函数会导致：\n   *      1、H5 可以正常调用 安卓这边的事件函数，但是无法再调用到 H5 的回调函数\n   * \n   * 前提 setupWebViewJavascriptBridge 这个函数使用的是 andoirFunction 这个，否则还是会导致上面 1 的现象出现\n   */\n  window.setupWebViewJavascriptBridge(function (bridge) {\n    // 注册 H5 界面的默认接收函数（与安卓交互时，不注册这个事件无法接收回调函数）\n    bridge.init(function (msg, responseCallback) {\n      // message.success(msg);\n      responseCallback(\"JS 返回给原生的消息内容\");\n    });\n  });\n}\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","map":{"version":3,"names":["React","ReactDOM","App","serviceWorker","u","navigator","userAgent","isAndroid","indexOf","isIOS","match","isInApp","andoirFunction","callback","window","WebViewJavascriptBridge","document","addEventListener","iosFuntion","WVJBCallbacks","push","WVJBIframe","createElement","style","display","src","documentElement","appendChild","setTimeout","removeChild","setupWebViewJavascriptBridge","bridge","init","msg","responseCallback","render","getElementById","unregister"],"sources":["/usr/local/var/www/orangeweb/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * 使用 JSBridge 总结：\n *  1、跟 IOS 交互的时候，只需要且必须注册 iosFuntion 方法即可，\n *      不能在 setupWebViewJavascriptBridge 中执行 bridge.init 方法，否则 IOS 无法调用到 H5 的注册函数；\n *  2、与安卓进行交互的时候\n *      ①、使用 iosFuntion，就可以实现 H5 调用 安卓的注册函数，但是安卓无法调用 H5 的注册函数，\n *          并且 H5 调用安卓成功后的回调函数也无法执行\n *      ②、使用 andoirFunction 并且要在 setupWebViewJavascriptBridge 中执行 bridge.init 方法，\n *          安卓才可以正常调用 H5 的回调函数，并且 H5 调用安卓成功后的回调函数也可以正常执行了\n */\n\nconst u = navigator.userAgent;\n// Android终端\nconst isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1;\n// IOS 终端\nconst isIOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/); \n\nconst isInApp = u.indexOf('app') > -1\n/**\n * Android  与安卓交互时：\n *      1、不调用这个函数安卓无法调用 H5 注册的事件函数；\n *      2、但是 H5 可以正常调用安卓注册的事件函数；\n *      3、还必须在 setupWebViewJavascriptBridge 中执行 bridge.init 方法，否则：\n *          ①、安卓依然无法调用 H5 注册的事件函数\n *          ①、H5 正常调用安卓事件函数后的回调函数无法正常执行\n *          \n * @param {*} callback \n */\nconst andoirFunction = (callback) => {\n    if (window.WebViewJavascriptBridge) {\n        callback(window.WebViewJavascriptBridge);\n    } else {\n        document.addEventListener('WebViewJavascriptBridgeReady', function () {\n            callback(window.WebViewJavascriptBridge);\n        }, false)\n    }\n}\n\n/**\n * IOS 与 IOS 交互时，使用这个函数即可，别的操作都不需要执行\n * @param {*} callback \n */\nconst iosFuntion = (callback) => {\n    if (window.WebViewJavascriptBridge) { return callback(window.WebViewJavascriptBridge) }\n    if (window.WVJBCallbacks) { return window.WVJBCallbacks.push(callback) }\n    window.WVJBCallbacks = [callback];\n    var WVJBIframe = document.createElement('iframe');\n    WVJBIframe.style.display = 'none';\n    WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';\n    document.documentElement.appendChild(WVJBIframe);\n    setTimeout(function(){\n         document.documentElement.removeChild(WVJBIframe);\n    }, 0);\n}\n\n/**\n * 注册 setupWebViewJavascriptBridge 方法\n *  之所以不将上面两个方法融合成一个方法，是因为放在一起，那么就只有 iosFuntion 中相关的方法体生效\n */\nwindow.setupWebViewJavascriptBridge = isInApp ? (isAndroid ? andoirFunction : iosFuntion) : null;\n\n/**\n * 这里如果不做判断是不是安卓，而是直接就执行下面的方法，就会导致 \n *      1、IOS 无法调用 H5 这边注册的事件函数\n *      2、H5 可以正常调用 IOS 这边的事件函数，并且 H5 的回调函数可以正常执行\n */\nif (isAndroid && isInApp) {\n    /**\n     * 与安卓交互时，不调用这个函数会导致：\n     *      1、H5 可以正常调用 安卓这边的事件函数，但是无法再调用到 H5 的回调函数\n     * \n     * 前提 setupWebViewJavascriptBridge 这个函数使用的是 andoirFunction 这个，否则还是会导致上面 1 的现象出现\n     */\n    window.setupWebViewJavascriptBridge(function (bridge) {\n        // 注册 H5 界面的默认接收函数（与安卓交互时，不注册这个事件无法接收回调函数）\n        bridge.init(function (msg, responseCallback) {\n            // message.success(msg);\n            responseCallback(\"JS 返回给原生的消息内容\");\n        })\n    })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,cAAc;AACrB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,KAAKC,aAAa,MAAM,iBAAiB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,CAAC,GAAGC,SAAS,CAACC,SAAS;AAC7B;AACA,MAAMC,SAAS,GAAGH,CAAC,CAACI,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAIJ,CAAC,CAACI,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACpE;AACA,MAAMC,KAAK,GAAG,CAAC,CAACL,CAAC,CAACM,KAAK,CAAC,+BAA+B,CAAC;AAExD,MAAMC,OAAO,GAAGP,CAAC,CAACI,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,cAAc,GAAIC,QAAQ,IAAK;EACjC,IAAIC,MAAM,CAACC,uBAAuB,EAAE;IAChCF,QAAQ,CAACC,MAAM,CAACC,uBAAuB,CAAC;EAC5C,CAAC,MAAM;IACHC,QAAQ,CAACC,gBAAgB,CAAC,8BAA8B,EAAE,YAAY;MAClEJ,QAAQ,CAACC,MAAM,CAACC,uBAAuB,CAAC;IAC5C,CAAC,EAAE,KAAK,CAAC;EACb;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMG,UAAU,GAAIL,QAAQ,IAAK;EAC7B,IAAIC,MAAM,CAACC,uBAAuB,EAAE;IAAE,OAAOF,QAAQ,CAACC,MAAM,CAACC,uBAAuB,CAAC;EAAC;EACtF,IAAID,MAAM,CAACK,aAAa,EAAE;IAAE,OAAOL,MAAM,CAACK,aAAa,CAACC,IAAI,CAACP,QAAQ,CAAC;EAAC;EACvEC,MAAM,CAACK,aAAa,GAAG,CAACN,QAAQ,CAAC;EACjC,IAAIQ,UAAU,GAAGL,QAAQ,CAACM,aAAa,CAAC,QAAQ,CAAC;EACjDD,UAAU,CAACE,KAAK,CAACC,OAAO,GAAG,MAAM;EACjCH,UAAU,CAACI,GAAG,GAAG,gCAAgC;EACjDT,QAAQ,CAACU,eAAe,CAACC,WAAW,CAACN,UAAU,CAAC;EAChDO,UAAU,CAAC,YAAU;IAChBZ,QAAQ,CAACU,eAAe,CAACG,WAAW,CAACR,UAAU,CAAC;EACrD,CAAC,EAAE,CAAC,CAAC;AACT,CAAC;;AAED;AACA;AACA;AACA;AACAP,MAAM,CAACgB,4BAA4B,GAAGnB,OAAO,GAAIJ,SAAS,GAAGK,cAAc,GAAGM,UAAU,GAAI,IAAI;;AAEhG;AACA;AACA;AACA;AACA;AACA,IAAIX,SAAS,IAAII,OAAO,EAAE;EACtB;AACJ;AACA;AACA;AACA;AACA;EACIG,MAAM,CAACgB,4BAA4B,CAAC,UAAUC,MAAM,EAAE;IAClD;IACAA,MAAM,CAACC,IAAI,CAAC,UAAUC,GAAG,EAAEC,gBAAgB,EAAE;MACzC;MACAA,gBAAgB,CAAC,eAAe,CAAC;IACrC,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEAjC,QAAQ,CAACkC,MAAM,eACb,oBAAC,KAAK,CAAC,UAAU;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,gBACf,oBAAC,GAAG;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAAG,CACU,EACnBnB,QAAQ,CAACoB,cAAc,CAAC,MAAM,CAAC,CAChC;;AAED;AACA;AACA;AACAjC,aAAa,CAACkC,UAAU,EAAE"},"metadata":{},"sourceType":"module"}
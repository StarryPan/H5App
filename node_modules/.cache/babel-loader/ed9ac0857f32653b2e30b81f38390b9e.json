{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nexport function getComponentLocale(props, context, componentName, getDefaultLocale) {\n  var locale = {};\n  if (context && context.antLocale && context.antLocale[componentName]) {\n    locale = context.antLocale[componentName];\n  } else {\n    var defaultLocale = getDefaultLocale();\n    // TODO: make default lang of antd be English\n    // https://github.com/ant-design/ant-design/issues/6334\n    locale = defaultLocale['default'] || defaultLocale;\n  }\n  var result = _extends({}, locale);\n  if (props.locale) {\n    result = _extends({}, result, props.locale);\n    if (props.locale.lang) {\n      result.lang = _extends({}, locale.lang, props.locale.lang);\n    }\n  }\n  return result;\n}\nexport function getLocaleCode(context) {\n  var localeCode = context.antLocale && context.antLocale.locale;\n  // Had use LocaleProvide but didn't set locale\n  if (context.antLocale && context.antLocale.exist && !localeCode) {\n    return 'zh-cn';\n  }\n  return localeCode;\n}","map":{"version":3,"names":["_extends","getComponentLocale","props","context","componentName","getDefaultLocale","locale","antLocale","defaultLocale","result","lang","getLocaleCode","localeCode","exist"],"sources":["/usr/local/var/www/orangeweb/node_modules/antd-mobile/es/_util/getLocale.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nexport function getComponentLocale(props, context, componentName, getDefaultLocale) {\n    var locale = {};\n    if (context && context.antLocale && context.antLocale[componentName]) {\n        locale = context.antLocale[componentName];\n    } else {\n        var defaultLocale = getDefaultLocale();\n        // TODO: make default lang of antd be English\n        // https://github.com/ant-design/ant-design/issues/6334\n        locale = defaultLocale['default'] || defaultLocale;\n    }\n    var result = _extends({}, locale);\n    if (props.locale) {\n        result = _extends({}, result, props.locale);\n        if (props.locale.lang) {\n            result.lang = _extends({}, locale.lang, props.locale.lang);\n        }\n    }\n    return result;\n}\nexport function getLocaleCode(context) {\n    var localeCode = context.antLocale && context.antLocale.locale;\n    // Had use LocaleProvide but didn't set locale\n    if (context.antLocale && context.antLocale.exist && !localeCode) {\n        return 'zh-cn';\n    }\n    return localeCode;\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAO,SAASC,kBAAkB,CAACC,KAAK,EAAEC,OAAO,EAAEC,aAAa,EAAEC,gBAAgB,EAAE;EAChF,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIH,OAAO,IAAIA,OAAO,CAACI,SAAS,IAAIJ,OAAO,CAACI,SAAS,CAACH,aAAa,CAAC,EAAE;IAClEE,MAAM,GAAGH,OAAO,CAACI,SAAS,CAACH,aAAa,CAAC;EAC7C,CAAC,MAAM;IACH,IAAII,aAAa,GAAGH,gBAAgB,EAAE;IACtC;IACA;IACAC,MAAM,GAAGE,aAAa,CAAC,SAAS,CAAC,IAAIA,aAAa;EACtD;EACA,IAAIC,MAAM,GAAGT,QAAQ,CAAC,CAAC,CAAC,EAAEM,MAAM,CAAC;EACjC,IAAIJ,KAAK,CAACI,MAAM,EAAE;IACdG,MAAM,GAAGT,QAAQ,CAAC,CAAC,CAAC,EAAES,MAAM,EAAEP,KAAK,CAACI,MAAM,CAAC;IAC3C,IAAIJ,KAAK,CAACI,MAAM,CAACI,IAAI,EAAE;MACnBD,MAAM,CAACC,IAAI,GAAGV,QAAQ,CAAC,CAAC,CAAC,EAAEM,MAAM,CAACI,IAAI,EAAER,KAAK,CAACI,MAAM,CAACI,IAAI,CAAC;IAC9D;EACJ;EACA,OAAOD,MAAM;AACjB;AACA,OAAO,SAASE,aAAa,CAACR,OAAO,EAAE;EACnC,IAAIS,UAAU,GAAGT,OAAO,CAACI,SAAS,IAAIJ,OAAO,CAACI,SAAS,CAACD,MAAM;EAC9D;EACA,IAAIH,OAAO,CAACI,SAAS,IAAIJ,OAAO,CAACI,SAAS,CAACM,KAAK,IAAI,CAACD,UAAU,EAAE;IAC7D,OAAO,OAAO;EAClB;EACA,OAAOA,UAAU;AACrB"},"metadata":{},"sourceType":"module"}